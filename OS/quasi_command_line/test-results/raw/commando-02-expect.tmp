BASH> printf "help\nlist\nexit\n" > test-results/cmds.tmp
BASH> ./commando < test-results/cmds.tmp && printf "\n\n"
@> COMMANDO COMMANDS
help               : show this message
exit               : exit the program
list               : list all jobs that have been started giving information on each
pause nanos secs   : pause for the given number of nanseconds and seconds
output-for int     : print the output for given job number
output-all         : print output for all jobs
wait-for int       : wait until the given job number finishes
wait-all           : wait for all jobs to finish
command arg1 ...   : non-built-in is run as a job
@> JOB  #PID      STAT   STR_STAT OUTB COMMAND
@> 

BASH> ./commando --echo < test-results/cmds.tmp && printf "\n\n"
@> help
COMMANDO COMMANDS
help               : show this message
exit               : exit the program
list               : list all jobs that have been started giving information on each
pause nanos secs   : pause for the given number of nanseconds and seconds
output-for int     : print the output for given job number
output-all         : print output for all jobs
wait-for int       : wait until the given job number finishes
wait-all           : wait for all jobs to finish
command arg1 ...   : non-built-in is run as a job
@> list
JOB  #PID      STAT   STR_STAT OUTB COMMAND
@> exit


BASH> export COMMANDO_ECHO=1
BASH> ./commando < test-results/cmds.tmp && printf "\n\n"
@> help
COMMANDO COMMANDS
help               : show this message
exit               : exit the program
list               : list all jobs that have been started giving information on each
pause nanos secs   : pause for the given number of nanseconds and seconds
output-for int     : print the output for given job number
output-all         : print output for all jobs
wait-for int       : wait until the given job number finishes
wait-all           : wait for all jobs to finish
command arg1 ...   : non-built-in is run as a job
@> list
JOB  #PID      STAT   STR_STAT OUTB COMMAND
@> exit


